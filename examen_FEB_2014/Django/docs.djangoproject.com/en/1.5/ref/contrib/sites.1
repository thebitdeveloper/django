<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Language" content="en-us" />
    <title>The &#8220;sites&#8221; framework | Django documentation | Django</title>
    <meta name="ROBOTS" content="ALL" />
    <meta http-equiv="imagetoolbar" content="no" />
    <meta name="MSSmartTagsPreventParsing" content="true" />
    <meta name="Copyright" content="Django Software Foundation" />
    <meta name="keywords" content="Python, Django, framework, open-source" />
    <meta name="description" content="Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design." />
    
    <link href="../../../../s/css/base.383e0bb3119d.css" rel="stylesheet" type="text/css" media="screen" />
    
    <link href="../../../../s/css/print.ac134bbb8dfc.css" rel="stylesheet" type="text/css" media="print" />
    
  
  <link rel="stylesheet" href="../../../../s/css/docs/docs.feec2ab82630.css" type="text/css" />
  <link rel="stylesheet" href="../../../../s/css/pygments.0d57d48be058.css" type="text/css" />

  </head>
  <body id="documentation" class="default">
  <div id="container">
    <div id="header">
      <h1 id="logo"><a href="https://www.djangoproject.com/"><img src="../../../../s/img/site/hdr_logo.b19c5e60269d.gif" alt="Django" /></a></h1>
      <ul id="nav-global">
        <li id="nav-homepage"><a href="https://www.djangoproject.com/">Home</a></li>
        <li id="nav-download"><a href="https://www.djangoproject.com/download/">Download</a></li>
        <li id="nav-documentation"><a href="../../../../index.html">Documentation</a></li>
        <li id="nav-weblog"><a href="https://www.djangoproject.com/weblog/">Weblog</a></li>
        <li id="nav-community"><a href="https://www.djangoproject.com/community/">Community</a></li>
        <li id="nav-code"><a href="https://code.djangoproject.com/">Code</a></li>
      </ul>
    </div>
    <!-- END Header -->
    <div id="billboard">
  <h2><a href="../../../../index.html">Django documentation</a></h2>
</div>
    <div id="columnwrap">
      
		<div id="content-main">
		


  
  
  <ul id="doc-versions">
      
        
          <li class="other">
          
            <a href="../../../1.0/ref/contrib/sites.1">1.0</a>
          
          </li>
        
      
        
          <li class="other">
          
            <a href="../../../1.1/ref/contrib/sites.1">1.1</a>
          
          </li>
        
      
        
          <li class="other">
          
            <a href="../../../1.2/ref/contrib/sites.1">1.2</a>
          
          </li>
        
      
        
          <li class="other">
          
            <a href="../../../1.3/ref/contrib/sites.1">1.3</a>
          
          </li>
        
      
        
          <li class="other">
          
            <a href="../../../1.4/ref/contrib/sites.1">1.4</a>
          
          </li>
        
      
        
      
        
          <li class="other">
          
            <a href="../../../1.6/ref/contrib/sites.1">1.6</a>
          
          </li>
        
      
        
          <li class="other">
          
            <a href="../../../dev/ref/contrib/sites.1">dev</a>
          
          </li>
        
      
      <li class="current"
          title="This document describes Django 1.5. Click on the links on the left to see other versions.">
        <span>Documentation version:
          <strong>1.5
          </strong>
        </span>
      </li>
  </ul>
  <div class="section" id="s-module-django.contrib.sites">
<span id="s-the-sites-framework"></span><span id="module-django.contrib.sites"></span><span id="the-sites-framework"></span><h1>The &#8220;sites&#8221; framework<a class="headerlink" href="sites.1#module-django.contrib.sites" title="Permalink to this headline">¶</a></h1>
<p>Django comes with an optional &#8220;sites&#8221; framework. It&#8217;s a hook for associating
objects and functionality to particular Web sites, and it&#8217;s a holding place for
the domain names and &#8220;verbose&#8221; names of your Django-powered sites.</p>
<p>Use it if your single Django installation powers more than one site and you
need to differentiate between those sites in some way.</p>
<p>The whole sites framework is based on a simple model:</p>
<dl class="class">
<dt id="django.contrib.sites.models.Site">
<em class="property">class </em><tt class="descname">Site</tt><a class="headerlink" href="sites.1#django.contrib.sites.models.Site" title="Permalink to this definition">¶</a></dt>
<dd><p>A model for storing the <tt class="docutils literal"><span class="pre">domain</span></tt> and <tt class="docutils literal"><span class="pre">name</span></tt> attributes of a Web site.
The <a class="reference internal" href="../settings/index.html#std:setting-SITE_ID"><tt class="xref std std-setting docutils literal"><span class="pre">SITE_ID</span></tt></a> setting specifies the database ID of the
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> object associated with that
particular settings file.</p>
<dl class="attribute">
<dt id="django.contrib.sites.models.Site.domain">
<tt class="descname">domain</tt><a class="headerlink" href="sites.1#django.contrib.sites.models.Site.domain" title="Permalink to this definition">¶</a></dt>
<dd><p>The domain name associated with the Web site.</p>
</dd></dl>

<dl class="attribute">
<dt id="django.contrib.sites.models.Site.name">
<tt class="descname">name</tt><a class="headerlink" href="sites.1#django.contrib.sites.models.Site.name" title="Permalink to this definition">¶</a></dt>
<dd><p>A human-readable &#8220;verbose&#8221; name for the Web site.</p>
</dd></dl>

</dd></dl>

<p>How you use this is up to you, but Django uses it in a couple of ways
automatically via simple conventions.</p>
<div class="section" id="s-example-usage">
<span id="example-usage"></span><h2>Example usage<a class="headerlink" href="sites.1#example-usage" title="Permalink to this headline">¶</a></h2>
<p>Why would you use sites? It&#8217;s best explained through examples.</p>
<div class="section" id="s-associating-content-with-multiple-sites">
<span id="associating-content-with-multiple-sites"></span><h3>Associating content with multiple sites<a class="headerlink" href="sites.1#associating-content-with-multiple-sites" title="Permalink to this headline">¶</a></h3>
<p>The Django-powered sites <a class="reference external" href="http://www.ljworld.com/">LJWorld.com</a> and <a class="reference external" href="http://www.lawrence.com/">Lawrence.com</a> are operated by the
same news organization &#8211; the Lawrence Journal-World newspaper in Lawrence,
Kansas. LJWorld.com focuses on news, while Lawrence.com focuses on local
entertainment. But sometimes editors want to publish an article on <em>both</em>
sites.</p>
<p>The brain-dead way of solving the problem would be to require site producers to
publish the same story twice: once for LJWorld.com and again for Lawrence.com.
But that&#8217;s inefficient for site producers, and it&#8217;s redundant to store
multiple copies of the same story in the database.</p>
<p>The better solution is simple: Both sites use the same article database, and an
article is associated with one or more sites. In Django model terminology,
that&#8217;s represented by a <a class="reference internal" href="../models/fields.1#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> in the
<tt class="docutils literal"><span class="pre">Article</span></tt> model:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">Site</span>

<span class="k">class</span> <span class="nc">Article</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">headline</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="c"># ...</span>
    <span class="n">sites</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">Site</span><span class="p">)</span>
</pre></div>
</div>
<p>This accomplishes several things quite nicely:</p>
<ul>
<li><p class="first">It lets the site producers edit all content &#8211; on both sites &#8211; in a
single interface (the Django admin).</p>
</li>
<li><p class="first">It means the same story doesn&#8217;t have to be published twice in the
database; it only has a single record in the database.</p>
</li>
<li><p class="first">It lets the site developers use the same Django view code for both sites.
The view code that displays a given story just checks to make sure the
requested story is on the current site. It looks something like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">get_current_site</span>

<span class="k">def</span> <span class="nf">article_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">article_id</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">Article</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="n">article_id</span><span class="p">,</span> <span class="n">sites__id__exact</span><span class="o">=</span><span class="n">get_current_site</span><span class="p">(</span><span class="n">request</span><span class="p">)</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">Article</span><span class="o">.</span><span class="n">DoesNotExist</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">Http404</span>
    <span class="c"># ...</span>
</pre></div>
</div>
</li>
</ul>
</div>
<div class="section" id="s-associating-content-with-a-single-site">
<span id="associating-content-with-a-single-site"></span><h3>Associating content with a single site<a class="headerlink" href="sites.1#associating-content-with-a-single-site" title="Permalink to this headline">¶</a></h3>
<p>Similarly, you can associate a model to the
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>
model in a many-to-one relationship, using
<a class="reference internal" href="../models/fields.1#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a>.</p>
<p>For example, if an article is only allowed on a single site, you&#8217;d use a model
like this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">Site</span>

<span class="k">class</span> <span class="nc">Article</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">headline</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="c"># ...</span>
    <span class="n">site</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Site</span><span class="p">)</span>
</pre></div>
</div>
<p>This has the same benefits as described in the last section.</p>
</div>
<div class="section" id="s-hooking-into-the-current-site-from-views">
<span id="s-hooking-into-current-site-from-views"></span><span id="hooking-into-the-current-site-from-views"></span><span id="hooking-into-current-site-from-views"></span><h3>Hooking into the current site from views<a class="headerlink" href="sites.1#hooking-into-the-current-site-from-views" title="Permalink to this headline">¶</a></h3>
<p>You can use the sites framework in your Django views to do
particular things based on the site in which the view is being called.
For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.conf</span> <span class="kn">import</span> <span class="n">settings</span>

<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">settings</span><span class="o">.</span><span class="n">SITE_ID</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
        <span class="c"># Do something.</span>
        <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c"># Do something else.</span>
        <span class="k">pass</span>
</pre></div>
</div>
<p>Of course, it&#8217;s ugly to hard-code the site IDs like that. This sort of
hard-coding is best for hackish fixes that you need done quickly. The
cleaner way of accomplishing the same thing is to check the current site&#8217;s
domain:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">get_current_site</span>

<span class="k">def</span> <span class="nf">my_view</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="n">current_site</span> <span class="o">=</span> <span class="n">get_current_site</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">current_site</span><span class="o">.</span><span class="n">domain</span> <span class="o">==</span> <span class="s">&#39;foo.com&#39;</span><span class="p">:</span>
        <span class="c"># Do something</span>
        <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c"># Do something else.</span>
        <span class="k">pass</span>
</pre></div>
</div>
<p>This has also the advantage of checking if the sites framework is installed,
and return a <a class="reference internal" href="sites.1#django.contrib.sites.models.RequestSite" title="django.contrib.sites.models.RequestSite"><tt class="xref py py-class docutils literal"><span class="pre">RequestSite</span></tt></a> instance if it is not.</p>
<p>If you don&#8217;t have access to the request object, you can use the
<tt class="docutils literal"><span class="pre">get_current()</span></tt> method of the <a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>
model&#8217;s manager. You should then ensure that your settings file does contain
the <a class="reference internal" href="../settings/index.html#std:setting-SITE_ID"><tt class="xref std std-setting docutils literal"><span class="pre">SITE_ID</span></tt></a> setting. This example is equivalent to the previous one:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">Site</span>

<span class="k">def</span> <span class="nf">my_function_without_request</span><span class="p">():</span>
    <span class="n">current_site</span> <span class="o">=</span> <span class="n">Site</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_current</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">current_site</span><span class="o">.</span><span class="n">domain</span> <span class="o">==</span> <span class="s">&#39;foo.com&#39;</span><span class="p">:</span>
        <span class="c"># Do something</span>
        <span class="k">pass</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c"># Do something else.</span>
        <span class="k">pass</span>
</pre></div>
</div>
</div>
<div class="section" id="s-getting-the-current-domain-for-display">
<span id="getting-the-current-domain-for-display"></span><h3>Getting the current domain for display<a class="headerlink" href="sites.1#getting-the-current-domain-for-display" title="Permalink to this headline">¶</a></h3>
<p>LJWorld.com and Lawrence.com both have email alert functionality, which lets
readers sign up to get notifications when news happens. It&#8217;s pretty basic: A
reader signs up on a Web form, and he immediately gets an email saying,
&#8220;Thanks for your subscription.&#8221;</p>
<p>It&#8217;d be inefficient and redundant to implement this signup-processing code
twice, so the sites use the same code behind the scenes. But the &#8220;thank you for
signing up&#8221; notice needs to be different for each site. By using
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>
objects, we can abstract the &#8220;thank you&#8221; notice to use the values of the
current site&#8217;s <a class="reference internal" href="sites.1#django.contrib.sites.models.Site.name" title="django.contrib.sites.models.Site.name"><tt class="xref py py-attr docutils literal"><span class="pre">name</span></tt></a> and
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site.domain" title="django.contrib.sites.models.Site.domain"><tt class="xref py py-attr docutils literal"><span class="pre">domain</span></tt></a>.</p>
<p>Here&#8217;s an example of what the form-handling view looks like:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">get_current_site</span>
<span class="kn">from</span> <span class="nn">django.core.mail</span> <span class="kn">import</span> <span class="n">send_mail</span>

<span class="k">def</span> <span class="nf">register_for_newsletter</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c"># Check form values, etc., and subscribe the user.</span>
    <span class="c"># ...</span>

    <span class="n">current_site</span> <span class="o">=</span> <span class="n">get_current_site</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
    <span class="n">send_mail</span><span class="p">(</span><span class="s">&#39;Thanks for subscribing to </span><span class="si">%s</span><span class="s"> alerts&#39;</span> <span class="o">%</span> <span class="n">current_site</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
        <span class="s">&#39;Thanks for your subscription. We appreciate it.</span><span class="se">\n\n</span><span class="s">-The </span><span class="si">%s</span><span class="s"> team.&#39;</span> <span class="o">%</span> <span class="n">current_site</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
        <span class="s">&#39;editor@</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">current_site</span><span class="o">.</span><span class="n">domain</span><span class="p">,</span>
        <span class="p">[</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">])</span>

    <span class="c"># ...</span>
</pre></div>
</div>
<p>On Lawrence.com, this email has the subject line &#8220;Thanks for subscribing to
lawrence.com alerts.&#8221; On LJWorld.com, the email has the subject &#8220;Thanks for
subscribing to LJWorld.com alerts.&#8221; Same goes for the email&#8217;s message body.</p>
<p>Note that an even more flexible (but more heavyweight) way of doing this would
be to use Django&#8217;s template system. Assuming Lawrence.com and LJWorld.com have
different template directories (<a class="reference internal" href="../settings/index.html#std:setting-TEMPLATE_DIRS"><tt class="xref std std-setting docutils literal"><span class="pre">TEMPLATE_DIRS</span></tt></a>), you could simply
farm out to the template system like so:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.core.mail</span> <span class="kn">import</span> <span class="n">send_mail</span>
<span class="kn">from</span> <span class="nn">django.template</span> <span class="kn">import</span> <span class="n">loader</span><span class="p">,</span> <span class="n">Context</span>

<span class="k">def</span> <span class="nf">register_for_newsletter</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c"># Check form values, etc., and subscribe the user.</span>
    <span class="c"># ...</span>

    <span class="n">subject</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;alerts/subject.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">Context</span><span class="p">({}))</span>
    <span class="n">message</span> <span class="o">=</span> <span class="n">loader</span><span class="o">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">&#39;alerts/message.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">Context</span><span class="p">({}))</span>
    <span class="n">send_mail</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="s">&#39;editor@ljworld.com&#39;</span><span class="p">,</span> <span class="p">[</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">])</span>

    <span class="c"># ...</span>
</pre></div>
</div>
<p>In this case, you&#8217;d have to create <tt class="file docutils literal"><span class="pre">subject.txt</span></tt> and <tt class="file docutils literal"><span class="pre">message.txt</span></tt>
template files for both the LJWorld.com and Lawrence.com template directories.
That gives you more flexibility, but it&#8217;s also more complex.</p>
<p>It&#8217;s a good idea to exploit the <a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>
objects as much as possible, to remove unneeded complexity and redundancy.</p>
</div>
<div class="section" id="s-getting-the-current-domain-for-full-urls">
<span id="getting-the-current-domain-for-full-urls"></span><h3>Getting the current domain for full URLs<a class="headerlink" href="sites.1#getting-the-current-domain-for-full-urls" title="Permalink to this headline">¶</a></h3>
<p>Django&#8217;s <tt class="docutils literal"><span class="pre">get_absolute_url()</span></tt> convention is nice for getting your objects&#8217;
URL without the domain name, but in some cases you might want to display the
full URL &#8211; with <tt class="docutils literal"><span class="pre">http://</span></tt> and the domain and everything &#8211; for an object.
To do this, you can use the sites framework. A simple example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">Site</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">obj</span> <span class="o">=</span> <span class="n">MyModel</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">id</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">obj</span><span class="o">.</span><span class="n">get_absolute_url</span><span class="p">()</span>
<span class="go">&#39;/mymodel/objects/3/&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">Site</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_current</span><span class="p">()</span><span class="o">.</span><span class="n">domain</span>
<span class="go">&#39;example.com&#39;</span>
<span class="gp">&gt;&gt;&gt; </span><span class="s">&#39;http://</span><span class="si">%s%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">Site</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_current</span><span class="p">()</span><span class="o">.</span><span class="n">domain</span><span class="p">,</span> <span class="n">obj</span><span class="o">.</span><span class="n">get_absolute_url</span><span class="p">())</span>
<span class="go">&#39;http://example.com/mymodel/objects/3/&#39;</span>
</pre></div>
</div>
</div>
</div>
<div class="section" id="s-default-site-and-syncdb">
<span id="s-enabling-the-sites-framework"></span><span id="default-site-and-syncdb"></span><span id="enabling-the-sites-framework"></span><h2>Default site and <tt class="docutils literal"><span class="pre">syncdb</span></tt><a class="headerlink" href="sites.1#default-site-and-syncdb" title="Permalink to this headline">¶</a></h2>
<p><tt class="docutils literal"><span class="pre">django.contrib.sites</span></tt> registers a
<a class="reference internal" href="../signals.1#django.db.models.signals.post_syncdb" title="django.db.models.signals.post_syncdb"><tt class="xref py py-data docutils literal"><span class="pre">post_syncdb</span></tt></a> signal handler which creates a
default site named <tt class="docutils literal"><span class="pre">example.com</span></tt> with the domain <tt class="docutils literal"><span class="pre">example.com</span></tt>. For
example, this site will be created after Django creates the test database.</p>
</div>
<div class="section" id="s-caching-the-current-site-object">
<span id="caching-the-current-site-object"></span><h2>Caching the current <tt class="docutils literal"><span class="pre">Site</span></tt> object<a class="headerlink" href="sites.1#caching-the-current-site-object" title="Permalink to this headline">¶</a></h2>
<p>As the current site is stored in the database, each call to
<tt class="docutils literal"><span class="pre">Site.objects.get_current()</span></tt> could result in a database query. But Django is a
little cleverer than that: on the first request, the current site is cached, and
any subsequent call returns the cached data instead of hitting the database.</p>
<p>If for any reason you want to force a database query, you can tell Django to
clear the cache using <tt class="docutils literal"><span class="pre">Site.objects.clear_cache()</span></tt>:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="c"># First call; current site fetched from database.</span>
<span class="n">current_site</span> <span class="o">=</span> <span class="n">Site</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_current</span><span class="p">()</span>
<span class="c"># ...</span>

<span class="c"># Second call; current site fetched from cache.</span>
<span class="n">current_site</span> <span class="o">=</span> <span class="n">Site</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_current</span><span class="p">()</span>
<span class="c"># ...</span>

<span class="c"># Force a database query for the third call.</span>
<span class="n">Site</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">clear_cache</span><span class="p">()</span>
<span class="n">current_site</span> <span class="o">=</span> <span class="n">Site</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get_current</span><span class="p">()</span>
</pre></div>
</div>
</div>
<div class="section" id="s-the-currentsitemanager">
<span id="the-currentsitemanager"></span><h2>The <tt class="docutils literal"><span class="pre">CurrentSiteManager</span></tt><a class="headerlink" href="sites.1#the-currentsitemanager" title="Permalink to this headline">¶</a></h2>
<dl class="class">
<dt id="django.contrib.sites.managers.CurrentSiteManager">
<em class="property">class </em><tt class="descname">CurrentSiteManager</tt><a class="headerlink" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

<p>If <a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> plays a key role in your
application, consider using the helpful
<a class="reference internal" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="django.contrib.sites.managers.CurrentSiteManager"><tt class="xref py py-class docutils literal"><span class="pre">CurrentSiteManager</span></tt></a> in your
model(s). It&#8217;s a model <a class="reference internal" href="../../topics/db/managers/index.html"><em>manager</em></a> that
automatically filters its queries to include only objects associated
with the current <a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>.</p>
<p>Use <a class="reference internal" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="django.contrib.sites.managers.CurrentSiteManager"><tt class="xref py py-class docutils literal"><span class="pre">CurrentSiteManager</span></tt></a> by adding it to
your model explicitly. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">Site</span>
<span class="kn">from</span> <span class="nn">django.contrib.sites.managers</span> <span class="kn">import</span> <span class="n">CurrentSiteManager</span>

<span class="k">class</span> <span class="nc">Photo</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">photo</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">FileField</span><span class="p">(</span><span class="n">upload_to</span><span class="o">=</span><span class="s">&#39;/home/photos&#39;</span><span class="p">)</span>
    <span class="n">photographer_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">pub_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
    <span class="n">site</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Site</span><span class="p">)</span>
    <span class="n">objects</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Manager</span><span class="p">()</span>
    <span class="n">on_site</span> <span class="o">=</span> <span class="n">CurrentSiteManager</span><span class="p">()</span>
</pre></div>
</div>
<p>With this model, <tt class="docutils literal"><span class="pre">Photo.objects.all()</span></tt> will return all <tt class="docutils literal"><span class="pre">Photo</span></tt> objects in
the database, but <tt class="docutils literal"><span class="pre">Photo.on_site.all()</span></tt> will return only the <tt class="docutils literal"><span class="pre">Photo</span></tt> objects
associated with the current site, according to the <a class="reference internal" href="../settings/index.html#std:setting-SITE_ID"><tt class="xref std std-setting docutils literal"><span class="pre">SITE_ID</span></tt></a> setting.</p>
<p>Put another way, these two statements are equivalent:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="n">Photo</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">site</span><span class="o">=</span><span class="n">settings</span><span class="o">.</span><span class="n">SITE_ID</span><span class="p">)</span>
<span class="n">Photo</span><span class="o">.</span><span class="n">on_site</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</pre></div>
</div>
<p>How did <a class="reference internal" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="django.contrib.sites.managers.CurrentSiteManager"><tt class="xref py py-class docutils literal"><span class="pre">CurrentSiteManager</span></tt></a>
know which field of <tt class="docutils literal"><span class="pre">Photo</span></tt> was the
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>? By default,
<a class="reference internal" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="django.contrib.sites.managers.CurrentSiteManager"><tt class="xref py py-class docutils literal"><span class="pre">CurrentSiteManager</span></tt></a> looks for a
either a <a class="reference internal" href="../models/fields.1#django.db.models.ForeignKey" title="django.db.models.ForeignKey"><tt class="xref py py-class docutils literal"><span class="pre">ForeignKey</span></tt></a> called
<tt class="docutils literal"><span class="pre">site</span></tt> or a
<a class="reference internal" href="../models/fields.1#django.db.models.ManyToManyField" title="django.db.models.ManyToManyField"><tt class="xref py py-class docutils literal"><span class="pre">ManyToManyField</span></tt></a> called
<tt class="docutils literal"><span class="pre">sites</span></tt> to filter on. If you use a field named something other than
<tt class="docutils literal"><span class="pre">site</span></tt> or <tt class="docutils literal"><span class="pre">sites</span></tt> to identify which
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> objects your object is
related to, then you need to explicitly pass the custom field name as
a parameter to
<a class="reference internal" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="django.contrib.sites.managers.CurrentSiteManager"><tt class="xref py py-class docutils literal"><span class="pre">CurrentSiteManager</span></tt></a> on your
model. The following model, which has a field called <tt class="docutils literal"><span class="pre">publish_on</span></tt>,
demonstrates this:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.sites.models</span> <span class="kn">import</span> <span class="n">Site</span>
<span class="kn">from</span> <span class="nn">django.contrib.sites.managers</span> <span class="kn">import</span> <span class="n">CurrentSiteManager</span>

<span class="k">class</span> <span class="nc">Photo</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">photo</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">FileField</span><span class="p">(</span><span class="n">upload_to</span><span class="o">=</span><span class="s">&#39;/home/photos&#39;</span><span class="p">)</span>
    <span class="n">photographer_name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
    <span class="n">pub_date</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
    <span class="n">publish_on</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Site</span><span class="p">)</span>
    <span class="n">objects</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Manager</span><span class="p">()</span>
    <span class="n">on_site</span> <span class="o">=</span> <span class="n">CurrentSiteManager</span><span class="p">(</span><span class="s">&#39;publish_on&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>If you attempt to use <a class="reference internal" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="django.contrib.sites.managers.CurrentSiteManager"><tt class="xref py py-class docutils literal"><span class="pre">CurrentSiteManager</span></tt></a>
and pass a field name that doesn&#8217;t exist, Django will raise a <tt class="docutils literal"><span class="pre">ValueError</span></tt>.</p>
<p>Finally, note that you&#8217;ll probably want to keep a normal
(non-site-specific) <tt class="docutils literal"><span class="pre">Manager</span></tt> on your model, even if you use
<a class="reference internal" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="django.contrib.sites.managers.CurrentSiteManager"><tt class="xref py py-class docutils literal"><span class="pre">CurrentSiteManager</span></tt></a>. As
explained in the <a class="reference internal" href="../../topics/db/managers/index.html"><em>manager documentation</em></a>, if
you define a manager manually, then Django won&#8217;t create the automatic
<tt class="docutils literal"><span class="pre">objects</span> <span class="pre">=</span> <span class="pre">models.Manager()</span></tt> manager for you. Also note that certain
parts of Django &#8211; namely, the Django admin site and generic views &#8211;
use whichever manager is defined <em>first</em> in the model, so if you want
your admin site to have access to all objects (not just site-specific
ones), put <tt class="docutils literal"><span class="pre">objects</span> <span class="pre">=</span> <span class="pre">models.Manager()</span></tt> in your model, before you
define <a class="reference internal" href="sites.1#django.contrib.sites.managers.CurrentSiteManager" title="django.contrib.sites.managers.CurrentSiteManager"><tt class="xref py py-class docutils literal"><span class="pre">CurrentSiteManager</span></tt></a>.</p>
</div>
<div class="section" id="s-how-django-uses-the-sites-framework">
<span id="how-django-uses-the-sites-framework"></span><h2>How Django uses the sites framework<a class="headerlink" href="sites.1#how-django-uses-the-sites-framework" title="Permalink to this headline">¶</a></h2>
<p>Although it&#8217;s not required that you use the sites framework, it&#8217;s strongly
encouraged, because Django takes advantage of it in a few places. Even if your
Django installation is powering only a single site, you should take the two
seconds to create the site object with your <tt class="docutils literal"><span class="pre">domain</span></tt> and <tt class="docutils literal"><span class="pre">name</span></tt>, and point
to its ID in your <a class="reference internal" href="../settings/index.html#std:setting-SITE_ID"><tt class="xref std std-setting docutils literal"><span class="pre">SITE_ID</span></tt></a> setting.</p>
<p>Here&#8217;s how Django uses the sites framework:</p>
<ul class="simple">
<li>In the <a class="reference internal" href="redirects.1#module-django.contrib.redirects" title="django.contrib.redirects: A framework for managing redirects."><tt class="xref py py-mod docutils literal"><span class="pre">redirects</span> <span class="pre">framework</span></tt></a>, each
redirect object is associated with a particular site. When Django searches
for a redirect, it takes into account the current site.</li>
<li>In the comments framework, each comment is associated with a particular
site. When a comment is posted, its
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> is set to the current site,
and when comments are listed via the appropriate template tag, only the
comments for the current site are displayed.</li>
<li>In the <a class="reference internal" href="flatpages.1#module-django.contrib.flatpages" title="django.contrib.flatpages: A framework for managing simple ?flat? HTML content in a database."><tt class="xref py py-mod docutils literal"><span class="pre">flatpages</span> <span class="pre">framework</span></tt></a>, each
flatpage is associated with a particular site. When a flatpage is created,
you specify its <a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>, and the
<a class="reference internal" href="flatpages.1#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware" title="django.contrib.flatpages.middleware.FlatpageFallbackMiddleware"><tt class="xref py py-class docutils literal"><span class="pre">FlatpageFallbackMiddleware</span></tt></a>
checks the current site in retrieving flatpages to display.</li>
<li>In the <a class="reference internal" href="syndication.1#module-django.contrib.syndication" title="django.contrib.syndication: A framework for generating syndication feeds, in RSS and Atom, quite easily."><tt class="xref py py-mod docutils literal"><span class="pre">syndication</span> <span class="pre">framework</span></tt></a>, the
templates for <tt class="docutils literal"><span class="pre">title</span></tt> and <tt class="docutils literal"><span class="pre">description</span></tt> automatically have access to a
variable <tt class="docutils literal"><span class="pre">{{</span> <span class="pre">site</span> <span class="pre">}}</span></tt>, which is the
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> object representing the current
site. Also, the hook for providing item URLs will use the <tt class="docutils literal"><span class="pre">domain</span></tt> from
the current <a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> object if you don&#8217;t
specify a fully-qualified domain.</li>
<li>In the <a class="reference internal" href="../../topics/auth/index#module-django.contrib.auth" title="django.contrib.auth: Django's authentication framework."><tt class="xref py py-mod docutils literal"><span class="pre">authentication</span> <span class="pre">framework</span></tt></a>, the
<a class="reference internal" href="../../topics/auth/default.1#django.contrib.auth.views.login" title="django.contrib.auth.views.login"><tt class="xref py py-func docutils literal"><span class="pre">django.contrib.auth.views.login()</span></tt></a> view passes the current
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> name to the template as
<tt class="docutils literal"><span class="pre">{{</span> <span class="pre">site_name</span> <span class="pre">}}</span></tt>.</li>
<li>The shortcut view (<tt class="docutils literal"><span class="pre">django.views.defaults.shortcut</span></tt>) uses the domain
of the current <a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> object when
calculating an object&#8217;s URL.</li>
<li>In the admin framework, the &#8220;view on site&#8221; link uses the current
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> to work out the domain for the
site that it will redirect to.</li>
</ul>
</div>
<div class="section" id="s-requestsite-objects">
<span id="requestsite-objects"></span><h2><tt class="docutils literal"><span class="pre">RequestSite</span></tt> objects<a class="headerlink" href="sites.1#requestsite-objects" title="Permalink to this headline">¶</a></h2>
<p id="id1">Some <a class="reference internal" href="index.html"><em>django.contrib</em></a> applications take advantage of
the sites framework but are architected in a way that doesn&#8217;t <em>require</em> the
sites framework to be installed in your database. (Some people don&#8217;t want to, or
just aren&#8217;t <em>able</em> to install the extra database table that the sites framework
requires.) For those cases, the framework provides a
<a class="reference internal" href="sites.1#django.contrib.sites.models.RequestSite" title="django.contrib.sites.models.RequestSite"><tt class="xref py py-class docutils literal"><span class="pre">RequestSite</span></tt></a> class, which can be used as a
fallback when the database-backed sites framework is not available.</p>
<dl class="class">
<dt id="django.contrib.sites.models.RequestSite">
<em class="property">class </em><tt class="descname">RequestSite</tt><a class="headerlink" href="sites.1#django.contrib.sites.models.RequestSite" title="Permalink to this definition">¶</a></dt>
<dd><p>A class that shares the primary interface of
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> (i.e., it has
<tt class="docutils literal"><span class="pre">domain</span></tt> and <tt class="docutils literal"><span class="pre">name</span></tt> attributes) but gets its data from a Django
<a class="reference internal" href="../request-response.1#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">HttpRequest</span></tt></a> object rather than from a database.</p>
<p>The <tt class="docutils literal"><span class="pre">save()</span></tt> and <tt class="docutils literal"><span class="pre">delete()</span></tt> methods raise <tt class="docutils literal"><span class="pre">NotImplementedError</span></tt>.</p>
<dl class="method">
<dt id="django.contrib.sites.models.RequestSite.__init__">
<tt class="descname">__init__</tt>(<em>request</em>)<a class="headerlink" href="sites.1#django.contrib.sites.models.RequestSite.__init__" title="Permalink to this definition">¶</a></dt>
<dd><p>Sets the <tt class="docutils literal"><span class="pre">name</span></tt> and <tt class="docutils literal"><span class="pre">domain</span></tt> attributes to the value of
<a class="reference internal" href="../request-response.1#django.http.HttpRequest.get_host" title="django.http.HttpRequest.get_host"><tt class="xref py py-meth docutils literal"><span class="pre">get_host()</span></tt></a>.</p>
</dd></dl>

</dd></dl>

<p>A <a class="reference internal" href="sites.1#django.contrib.sites.models.RequestSite" title="django.contrib.sites.models.RequestSite"><tt class="xref py py-class docutils literal"><span class="pre">RequestSite</span></tt></a> object has a similar
interface to a normal <a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a> object, except
its <a class="reference internal" href="sites.1#django.contrib.sites.models.RequestSite.__init__" title="django.contrib.sites.models.RequestSite.__init__"><tt class="xref py py-meth docutils literal"><span class="pre">__init__()</span></tt></a> method takes an
<a class="reference internal" href="../request-response.1#django.http.HttpRequest" title="django.http.HttpRequest"><tt class="xref py py-class docutils literal"><span class="pre">HttpRequest</span></tt></a> object. It&#8217;s able to deduce the
<tt class="docutils literal"><span class="pre">domain</span></tt> and <tt class="docutils literal"><span class="pre">name</span></tt> by looking at the request&#8217;s domain. It has <tt class="docutils literal"><span class="pre">save()</span></tt>
and <tt class="docutils literal"><span class="pre">delete()</span></tt> methods to match the interface of
<a class="reference internal" href="sites.1#django.contrib.sites.models.Site" title="django.contrib.sites.models.Site"><tt class="xref py py-class docutils literal"><span class="pre">Site</span></tt></a>, but the methods raise
<tt class="docutils literal"><span class="pre">NotImplementedError</span></tt>.</p>
</div>
</div>


<div class="browse-horizontal">
  
    <div class="left"><a href="sitemaps.1">&laquo; The sitemap framework</a></div>
  
  
    <div class="right"><a href="staticfiles.1">The staticfiles app &raquo;</a></div>
  
</div>
<div id="content-secondary">
  <h2 id="comments">Questions/Feedback</h2>
  <p>Having trouble? We'd like to help!</p>
  <ul>
    <li>
      
      Try the <a href="../../faq/index.html">FAQ</a> — it's got answers to many common questions.
    </li>
    <li>
      Search for information in the <a
      href="http://groups.google.com/group/django-users/">archives of the
      django-users mailing list</a>, or <a
      href="http://groups.google.com/group/django-users/">post a question</a>.
    </li>
    <li>
      Ask a question in the <a href="irc://irc.freenode.net/">#django IRC
      channel</a>, or search the <a href="http://django-irc-logs.com/">IRC
      logs</a> to see if it has been asked before.
    </li>
    <li>
      If you notice errors with this documentation, please <a
      href="https://code.djangoproject.com/newticket?component=Documentation">
      open a ticket</a> and let us know! Please only use the ticket tracker for
      criticisms and improvements on the docs. For tech support, use the
      resources above.
    </li>
  </ul>
</div>

		</div>
		<!-- END #content-main -->
		<div id="content-related" class="sidebar">
		
  
    <h2>Search</h2>
    
    

<form action="https://docs.djangoproject.com/search/" id="sidebar_search" class="search">
  <div>
    <p>
      <input id="id_sidebar_search_q" name="q" type="search" />
    </p>
    <p>
      <label for="id_sidebar_search_release">Version:</label>
      <select id="id_sidebar_search_release" name="release">
<option value="2">Django 1.0</option>
<option value="3">Django 1.1</option>
<option value="4">Django 1.2</option>
<option value="5">Django 1.3</option>
<option value="6">Django 1.4</option>
<option value="7" selected="selected">Django 1.5</option>
<option value="9">Django 1.6</option>
<option value="1">Development trunk</option>
</select>
    </p>
    <p>
      <input type="submit" class="submit" value="Search" />
    </p>
  </div>
</form>

  

  
    <h2>Contents</h2>
    
      <ul>
<li><a class="reference internal" href="sites.1#">The &#8220;sites&#8221; framework</a><ul>
<li><a class="reference internal" href="sites.1#example-usage">Example usage</a><ul>
<li><a class="reference internal" href="sites.1#associating-content-with-multiple-sites">Associating content with multiple sites</a></li>
<li><a class="reference internal" href="sites.1#associating-content-with-a-single-site">Associating content with a single site</a></li>
<li><a class="reference internal" href="sites.1#hooking-into-the-current-site-from-views">Hooking into the current site from views</a></li>
<li><a class="reference internal" href="sites.1#getting-the-current-domain-for-display">Getting the current domain for display</a></li>
<li><a class="reference internal" href="sites.1#getting-the-current-domain-for-full-urls">Getting the current domain for full URLs</a></li>
</ul>
</li>
<li><a class="reference internal" href="sites.1#default-site-and-syncdb">Default site and <tt class="docutils literal"><span class="pre">syncdb</span></tt></a></li>
<li><a class="reference internal" href="sites.1#caching-the-current-site-object">Caching the current <tt class="docutils literal"><span class="pre">Site</span></tt> object</a></li>
<li><a class="reference internal" href="sites.1#the-currentsitemanager">The <tt class="docutils literal"><span class="pre">CurrentSiteManager</span></tt></a></li>
<li><a class="reference internal" href="sites.1#how-django-uses-the-sites-framework">How Django uses the sites framework</a></li>
<li><a class="reference internal" href="sites.1#requestsite-objects"><tt class="docutils literal"><span class="pre">RequestSite</span></tt> objects</a></li>
</ul>
</li>
</ul>

    
  
  
    <h2>Browse</h2>
    <ul>
      
        
          <li>Prev: <a href="sitemaps.1">The sitemap framework</a></li>
        
        
          <li>Next: <a href="staticfiles.1">The staticfiles app</a></li>
        
        <li><a href="../../contents/index.html">Table of contents</a></li>
        
          <li><a href="../../genindex/index.html">General Index</a></li>
        
          <li><a href="../../py-modindex/index.html">Python Module Index</a></li>
        
      
    </ul>
  

  
    <h2>You are here:</h2>
    <ul>
      
        <li>
          <a href="../../../../index.html">Django 1.5 documentation</a>
          
            <ul><li><a href="../index.html">API Reference</a>
          
            <ul><li><a href="index.html"><tt class="docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal docutils literal"><span class="pre">contrib</span></tt> packages</a>
          
          <ul><li>The &#8220;sites&#8221; framework</li></ul>
          </li></ul></li></ul>
        </li>
      
    </ul>

    
      <h2>Download:</h2>
      <p>
        Offline (Django 1.5):
        <a href="../../../../m/docs/django-docs-1.5-en.zip">HTML</a> |
        <a href="http://media.readthedocs.org/pdf/django/1.5.x/django.pdf">PDF</a> |
        <a href="http://media.readthedocs.org/epub/django/1.5.x/django.epub">ePub</a>
      <br>
      <span class="quiet">
        Provided by <a href="http://readthedocs.org/">Read the Docs</a>.
      </span>
      </p>
    
  

		</div>
		<!-- END #content-related -->

    </div>
    <!-- END #content -->
    <div id="footer">
      <p>&copy; 2005-2013
        <a href="https://www.djangoproject.com/foundation/"> Django Software
        Foundation</a> unless otherwise noted. Django is a
        <a href="https://www.djangoproject.com/trademarks/">registered
        trademark</a> of the Django Software Foundation.
        <a href="http://mediatemple.net/">Linux Web hosting</a> graciously
        provided by Media Temple.
      </p>
    </div>
    <!-- END #footer -->
  </div>
  <!-- END #container -->
  


  </body>
</html>
